// Project structure:
// src/main/java/com/example/cleanarch/
//   └── CleanArchApplication.java
//   ├── core/
//   │   ├── domain/
//   │   │   └── HealthStatus.java
//   │   ├── ports/
//   │   │   ├── input/
//   │   │   │   └── HealthCheckUseCase.java
//   │   │   └── output/
//   │   │       └── HealthCheckPort.java
//   │   └── usecases/
//   │       └── HealthCheckService.java
//   ├── infrastructure/
//   │   ├── adapters/
//   │   │   └── HealthCheckAdapter.java
//   │   └── config/
//   │       └── BeanConfiguration.java
//   └── presentation/
//       ├── controllers/
//       │   └── HealthCheckController.java
//       ├── dtos/
//       │   └── HealthCheckResponse.java
//       └── mappers/
//           └── HealthCheckMapper.java

// pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.2</version>
    </parent>
    
    <groupId>com.example</groupId>
    <artifactId>clean-arch</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    
    <properties>
        <java.version>17</java.version>
        <lombok.version>1.18.30</lombok.version>
        <mapstruct.version>1.5.5.Final</mapstruct.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

// CleanArchApplication.java
package com.example.cleanarch;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CleanArchApplication {
    public static void main(String[] args) {
        SpringApplication.run(CleanArchApplication.class, args);
    }
}

// core/domain/HealthStatus.java
package com.example.cleanarch.core.domain;

import lombok.Value;

@Value
public class HealthStatus {
    String status;
    String version;
    long uptime;
}

// core/ports/input/HealthCheckUseCase.java
package com.example.cleanarch.core.ports.input;

import com.example.cleanarch.core.domain.HealthStatus;

public interface HealthCheckUseCase {
    HealthStatus checkHealth();
}

// core/ports/output/HealthCheckPort.java
package com.example.cleanarch.core.ports.output;

public interface HealthCheckPort {
    long getUptime();
    String getVersion();
}

// core/usecases/HealthCheckService.java
package com.example.cleanarch.core.usecases;

import com.example.cleanarch.core.domain.HealthStatus;
import com.example.cleanarch.core.ports.input.HealthCheckUseCase;
import com.example.cleanarch.core.ports.output.HealthCheckPort;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class HealthCheckService implements HealthCheckUseCase {
    private final HealthCheckPort healthCheckPort;

    @Override
    public HealthStatus checkHealth() {
        return new HealthStatus(
            "UP",
            healthCheckPort.getVersion(),
            healthCheckPort.getUptime()
        );
    }
}

// infrastructure/adapters/HealthCheckAdapter.java
package com.example.cleanarch.infrastructure.adapters;

import com.example.cleanarch.core.ports.output.HealthCheckPort;
import org.springframework.stereotype.Component;

@Component
public class HealthCheckAdapter implements HealthCheckPort {
    private final long startTime = System.currentTimeMillis();

    @Override
    public long getUptime() {
        return System.currentTimeMillis() - startTime;
    }

    @Override
    public String getVersion() {
        return "1.0.0";
    }
}

// infrastructure/config/BeanConfiguration.java
package com.example.cleanarch.infrastructure.config;

import com.example.cleanarch.core.ports.input.HealthCheckUseCase;
import com.example.cleanarch.core.ports.output.HealthCheckPort;
import com.example.cleanarch.core.usecases.HealthCheckService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class BeanConfiguration {
    @Bean
    public HealthCheckUseCase healthCheckUseCase(HealthCheckPort healthCheckPort) {
        return new HealthCheckService(healthCheckPort);
    }
}

// presentation/controllers/HealthCheckController.java
package com.example.cleanarch.presentation.controllers;

import com.example.cleanarch.core.ports.input.HealthCheckUseCase;
import com.example.cleanarch.presentation.dtos.HealthCheckResponse;
import com.example.cleanarch.presentation.mappers.HealthCheckMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/health")
@RequiredArgsConstructor
public class HealthCheckController {
    private final HealthCheckUseCase healthCheckUseCase;
    private final HealthCheckMapper healthCheckMapper;

    @GetMapping
    public ResponseEntity<HealthCheckResponse> healthCheck() {
        return ResponseEntity.ok(
            healthCheckMapper.toResponse(healthCheckUseCase.checkHealth())
        );
    }
}

// presentation/dtos/HealthCheckResponse.java
package com.example.cleanarch.presentation.dtos;

import lombok.Value;

@Value
public class HealthCheckResponse {
    String status;
    String version;
    String uptime;
}

// presentation/mappers/HealthCheckMapper.java
package com.example.cleanarch.presentation.mappers;

import com.example.cleanarch.core.domain.HealthStatus;
import com.example.cleanarch.presentation.dtos.HealthCheckResponse;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

@Mapper(componentModel = "spring")
public interface HealthCheckMapper {
    @Mapping(target = "uptime", expression = "java(formatUptime(healthStatus.getUptime()))")
    HealthCheckResponse toResponse(HealthStatus healthStatus);

    default String formatUptime(long uptimeMillis) {
        long seconds = uptimeMillis / 1000;
        long minutes = seconds / 60;
        long hours = minutes / 60;
        long days = hours / 24;

        return String.format("%d days, %d hours, %d minutes, %d seconds",
            days, hours % 24, minutes % 60, seconds % 60);
    }
}